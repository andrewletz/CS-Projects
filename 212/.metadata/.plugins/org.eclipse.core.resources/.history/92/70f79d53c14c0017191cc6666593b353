package Main;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

public class Client {
	private static final int PORT = 1337;

	public static void main(String[] args) {
		ArrayList<Integer> intList = getIntList();
		System.out.println("running client!");
		
		Socket socket = null;
		ObjectOutputStream outputStream = null;
		ObjectInputStream inputStream = null;		
		try {
			InetAddress address = InetAddress.getLocalHost();
			socket = new Socket(address, PORT);
			
			System.out.println("socket created");
			
			// Always flush an object output stream preemptively (see docs).
			outputStream = new ObjectOutputStream(socket.getOutputStream());
			outputStream.flush();
			
			for (int i : intList) {
				outputStream.writeInt(i);
				outputStream.flush();
			}
			outputStream.writeInt(-999);
			outputStream.flush();
			
			inputStream = new ObjectInputStream(socket.getInputStream());
			
			ArrayList<Integer> receivedList = new ArrayList<Integer>();
			int message;
			do {
				message = inputStream.readInt();
				if(message != -999) {
					intList.add(message);
				}
			} while (message != -999);		
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			// Close resources in finally block so that they
			// get closed even if we hit an exception above.
			try {
				if (socket != null) {
					socket.close();
				}
				if (outputStream != null) {
					outputStream.close();
				}
				if (inputStream != null) {
					inputStream.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		
		System.out.println("client finished");
	}
	
	private static ArrayList<Integer> getIntList() {
		ArrayList<Integer> intList = new ArrayList<Integer>();
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter an integer (\"!\" to send)");
		boolean running = true;
		while (running) {
			String nextInput = sc.next();
			switch (nextInput) {
			case "!":
				running = false;
				sc.close();
				break;
			default:
				intList.add(Integer.parseInt(nextInput));
				System.out.println("Enter an integer (\"!\" to send)");
				break;
			}
		}
		
		return intList;
	}
}