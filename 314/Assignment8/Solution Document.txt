Andrew Letz

1)
Number of bytes taken up by struct point_color square[16][16]:
	16 * 16 point colors = 256 point colors
	256 * 4 integer objects = 1024 integer objects
	4 bytes per integer * 1024 integer objects = 4096 bytes
	The square therefore takes up 4096 bytes of space starting at address 0.\

a. The total number of memory writes will be (16 x 16) x 4 = 1024 as for each iteration of the loop
4 variables are being written to. This corresponds to the 1024 integer objects that exist in square.

b. 
On every other iteration of the loop there will be a miss. This starts with the first iteration where
we attempt to find square[i][j].c = 1; which will not be in the cache (it is empty). With this miss
we load in the 32-bytes starting at the memory address 0 which will contain both the first and second
point color (each is 16 bytes). This means that we will have 1 miss, then 3 hits, then 4 hits on the next
iteration. This process will repeat throughout the loop.
This means that 1 out of 8 point color integer writes will be a miss, resulting in (1/8)(1024) = 128 misses.

c. The miss rate is 12.5% (1/8 integers).