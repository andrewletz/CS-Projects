Andrew Letz

-*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*-

1)
a. (x at %ebp + 8, n at %ebp + 12)

movl 8(%ebp), %esi			# Moves x into esi
movl 12(%ebp), %ebx		# Moves n into ebx
movl $-1, %edi					# Sets result to -1
movl $1, %edx					# Sets mask to 1
.L2: movl %edx, %eax		# Moves mask into eax
andl %esi, %eax				# eax = mask & x
xorl %eax, %edi				# result = result ^ (mask & x)
movl %ebx, %ecx				# Moves n into ecx
shll %ecx, %edx				# mask = mask << n
cmpl $0, %edx					# Compares 0 to mask
jne .L2								# If mask != 0, jump to .L2
movl %edi, %eax				# Move result into eax

b.
int loop(int x, int n) {
	int result = -1
	for (int mask = 1 ; mask != 0 ; mask = mask << n) {
		result ^= (mask & x) ;
	}
	return result;
}

-*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*-

2)
a.
.L3: 
movl (%ebx), %eax				# We load whatever is stored at the pointer in %ebx and put it in %eax
movl (%esi,%ecx,4), %edx	# Put A[i][j] into t 
movl %eax, (%esi,%ecx,4)	# put whatever was loaded into %eax into A[i][j]
addl $1, %ecx						# Add 1 to j
movl %edx, (%ebx)				# Move t into ebx (which we can now see is A[j][i])
addl $52, %ebx					# We push the pointer over by (52 / 4 = 13) bytes in order to get to the next column
cmpl %edi, %ecx					# is j < i
jl .L3									# reloop if above is true

b. M = 52 / 4 = 13

c. (check file 2.c)

-*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*_*-*-

3)
This is compiled with the command gcc 3.c -S -m32 -O1
_f:
	pushl	%ebp				# Push the base pointer on to the stack for later
	movl	%esp, %ebp			# Assign the value of the stack pointer to the base pointer

	imull	$3, 8(%ebp), %eax	# Multiply the base pointer offset by 8 (input) and store it in eax
	popl	%ebp				# Pop the base pointer off the stack so it is restored
	retl						# Return eax to the calling function
_g:
	pushl	%ebp				# Push the base pointer on to the stack for later
	movl	%esp, %ebp			# Assign the value of the stack pointer to the base pointer
	pushl	%edi				# Push the contents of edi onto the stack
	pushl	%esi				# Push the contents of esi onto the stack
	subl	$16, %esp			# Make space for local variables on the stack
	movl	12(%ebp), %edi		# Store 12 offset of the base pointer in edi
	movl	8(%ebp), %eax		# Store 8 offset of the base pointer in eax
	movl	%eax, (%esp)		# Make the "top" of the stack eax for the first call to f
	calll	_f					
	movl	%eax, %esi			# Put the result of this call into esi
	movl	%edi, (%esp)		# Make the "top" of the stack edi for the second call to f
	calll	_f					
	addl	%esi, %eax			# Add esi (result of first call to f) and eax (result of second call)
	addl	$16, %esp			# Restore stack by adding the same amount we subl'd at the start
	popl	%esi				# Pop esi from the stack to restore
	popl	%edi				# Pop edi from the stack to restore
	popl	%ebp				# Pop ebp from the stack to restore
	retl 						# Return eax to the calling function